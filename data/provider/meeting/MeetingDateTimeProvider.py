from datetime import datetime

from data.MeetingDataManipulator import MeetingDataManipulator
from database.MySQLQueryExecutor import MySQLQueryExecutor
from helper.LoggingHelper import LoggingHelper
from helper.SQLValidationHelper import validate_user_id, validate_meeting_id

SQL_QUERY = "SELECT MeetingDateTime FROM MeetingsAssistantInitial.meetings WHERE UserId = %(user_id)s AND MeetingId = %(meeting_id)s"

f = '%Y-%m-%d %H:%M:%S'


class MeetingDateTimeProvider(MeetingDataManipulator):
    """
    Retrieve a Datetime object for a meeting.
    """

    def __init__(self, user_id: str, meeting_id: int, logger=LoggingHelper(__name__).retrieve_logger()):
        """
        :param user_id: string id of the user provided by Auth0
        :param meeting_id: int id of the meeting, generated by the databse
        """

        super().__init__(user_id, meeting_id)
        self._logger = logger

        if self._validate_params() and self._connection_helper.is_connection_open():
            self._logger.info("Params valid and connection open")
            self._datetime_result = self._retrieve_date_time()
        else:
            self._logger.error("Query was not executed due to one of the following being "
                               "'false': \n Connection Open: %s \n Parameters Valid: %s",
                               str(self._connection_helper.is_connection_open()), str(self._validate_params()))

    def get_meeting_datetime(self):
        """
        Retrieve the datetime value for the meeting.
        :return: datetime value for the meeting.
        """

        return self._datetime_result

    def _retrieve_date_time(self) -> datetime:
        """
        Execute query on database to get the datetime and format into python datetime object

        :return: datetime object
        """
        query_helper = MySQLQueryExecutor(self._connection_helper.get_connection_cursor())
        rows_returned = query_helper.execute_query(SQL_QUERY, {
            'user_id': self._user_id,
            'meeting_id': self._meeting_id
        })

        for row in rows_returned:
            self._logger.info("Query Successful")
            return row[0]

        self._logger.error("DateTime not found")

    def _validate_params(self) -> bool:
        """
        Check that the parameters meet database requirements

        :return: boolean whether requirements are valid
        """
        return validate_user_id(self._user_id) and validate_meeting_id(self._meeting_id)
